## file handling of ext2 for waccOS

begin

#include "string.wach"
#include "uart_w.wach"
#include "ext2.wach"
#include "errno.wach"
#include "file.wach"
#include "kernel.wach"
#include "malloc.wach"

extern int blocksize;
extern char* strtok(char* str, char* delim);
extern int ext2_read_directory(int dino, char *f);
extern void ext2_read_inode(void *buf, int inode);
extern bool ext2_inode_is_dir(int inode);
extern void ext2_read_block(void *buf, int bid);

int sys_ext2_open(char *path, int flags) is
    ## for now, we only support O_RDONLY
    if (flags != 0) then
		return -EINVAL;
	end

    int inode = ext2_find_file_inode(path);
    if (inode == -ENOENT) then
        return -ENOENT;
    end

    struct file *fp = kmalloc(sizeof(struct file));

    if (ext2_inode_is_dir(inode)) then
        fp.isdir = true;
    else
        fp.isdir = false;
    end
    
    fp.oflags = flags;
    fp.path = path;
    fp.inode = inode;
    fp.size = -1;

    return get_fd(fp);
end

void ext2_read_singly(void *buf, int singly_block) is
    uint32 *block_buf = kmalloc(blocksize);
    ext2_read_block(block_buf, singly_block);

    for (int n = 0; n < 256; n ++) do
        uint32 blockid = *(block_buf + n);
        if (blockid == 0) then
            return;
        end
        ext2_read_block(buf + (n * blocksize), blockid);
    end
end

int ext2_find_file_inode(char *path) is
    char *fn = kmalloc(strlen(path) + 1);

    memcpy(fn, path, strlen(path) + 1);
    *(fn + strlen(path)) = 0;

    char* pch = strtok(fn, '/');
    if (pch == 0) then
        return 2; ## root directory
    end

    int ino = 2;
    while (pch != 0) do
        ino = ext2_read_directory(ino, pch);
        if (ino < 0) then
            return -ENOENT;
        end
        pch = strtok(0, '/');
    end
    return ino;
end

char *ext2_read_file_full(char *path) is
    int ino = ext2_find_file_inode(path);
    if (ino == -ENOENT) then
        return -ENOENT;
    end
    if (ext2_inode_is_dir(ino)) then
        return -EISDIR;
    end
    struct ext2_inode *inode = kmalloc(128);
    ext2_read_inode(inode, ino);

    char *buf = kmalloc(inode.size);
    char *block_buf = kmalloc(blocksize);
    if (inode.dbp1 != 0) then
        ext2_read_block(block_buf, inode.dbp1);
        memcpy(buf, block_buf, blocksize);
    end
    if (inode.dbp2 != 0) then
        ext2_read_block(block_buf, inode.dbp2);
        int offset = blocksize * 1;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp3 != 0) then
        ext2_read_block(block_buf, inode.dbp3);
        int offset = blocksize * 2;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp4 != 0) then
        ext2_read_block(block_buf, inode.dbp4);
        int offset = blocksize * 3;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp5 != 0) then
        ext2_read_block(block_buf, inode.dbp5);
        int offset = blocksize * 4;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp6 != 0) then
        ext2_read_block(block_buf, inode.dbp6);
        int offset = blocksize * 5;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp7 != 0) then
        ext2_read_block(block_buf, inode.dbp7);
        int offset = blocksize * 6;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp8 != 0) then
        ext2_read_block(block_buf, inode.dbp8);
        int offset = blocksize * 7;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp9 != 0) then
        ext2_read_block(block_buf, inode.dbp9);
        int offset = blocksize * 8;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp10 != 0) then
        ext2_read_block(block_buf, inode.dbp10);
        int offset = blocksize * 9;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp11 != 0) then
        ext2_read_block(block_buf, inode.dbp11);
        int offset = blocksize * 10;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.dbp12 != 0) then
        ext2_read_block(block_buf, inode.dbp12);
        int offset = blocksize * 11;
        memcpy(buf + offset, block_buf, blocksize);
    end
    if (inode.singly_block != 0) then
        ext2_read_singly(buf + blocksize * 12, inode.singly_block);
    end

    return buf;
end

end
