## ELF file format handling for waccOS
begin

#include "kernel.wach"
#include "uart_w.wach"
#include "string.wach"
#include "malloc.wach"
#include "process.wach"
#include "elf.wach"

extern char *ext2_read_file_full(char *path);
extern struct process *new_process(char *comm, uint32 entry);
extern void process_set_entry(struct process *proc, uint32 entry);
extern void sched_rq_add(struct process *proc);

bool elf_do_probe(struct elf_header *elf) is
    if (elf.ei_magic0 != 0x7F) then
        return false;
    end
    if (elf.ei_magic1 != 'E') then
        return false;
    end
    if (elf.ei_magic2 != 'L') then
        return false;
    end
    if (elf.ei_magic3 != 'F') then
        return false;
    end

    return true;
end

void elf_dump_buffer(struct elf_header *elf) is
    if (elf_do_probe(elf)) then
        uart_write_stringN("elf: valid file");
    else
        uart_write_stringN("elf: invalid file");
        return;
    end

    uart_write_string("elf: entry point at: ");
    uart_write_int_hexN(elf.e_entry);

    uart_write_string("elf: program headers at: ");
    uart_write_int_hexN(elf.e_phoff);

    uart_write_string("elf: sections headers at: ");
    uart_write_int_hexN(elf.e_shoff);

    uart_write_string("elf: number of program headers: ");
    uart_write_int_hexN(elf.e_phnum);

    uart_write_string("elf: number of section headers: ");
    uart_write_int_hexN(elf.e_shnum);
end

void execute_at_address(char *p) is
    begin inline
        bx r4
    end
end

#define LOAD_ADDR
uint32 elf_load(uint8 *buf) is
    struct elf_header *elf = buf;

    struct elf_ph *ph = buf + elf.e_phoff;
    for (int i = 0; i < elf.e_phnum; i ++) do
        if (ph.p_type == 1) then
            ## this is a LOAD_PH
            memcpy(ph.p_vaddr, buf + ph.p_offset, ph.p_filesz);
        end
        ph ++;
    end

    return elf.e_entry;
end

uint32 elf_load_path(char *path) is
    char *buf = ext2_read_file_full(path);

    return elf_load(buf);
end

void elf_execute(uint8* buf) is
    uint32 entry = elf_load(buf);

    execute_at_address(entry);
end

void elf_execute_path(char *path) is
    char *buf = ext2_read_file_full(path);
    elf_execute(buf);
end

void elf_execute_path_in_new_process(char *path) is
    int len = strlen(path);
    char *namebuf = kmalloc(len + 1);
    memcpy(namebuf, path, len);
    *(namebuf + len) = 0;

    uint32 entry = elf_load_path(path);
    struct process *proc = new_process(namebuf, entry);
    sched_rq_add(proc);
end

void elf_dump_file(char *path) is
    char *buf = ext2_read_file_full(path);
    elf_dump_buffer(buf);
end

end
