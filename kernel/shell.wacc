begin
#include "uart_w.wach"
#include "mmio.wach"
#include "bcm2835_timer.wach"
#include "kernel.wach"
#include "file.wach"
#include "atoi.wach"
#include "errno.wach"
#include "string.wach"
#include "frame.wach"
#include "malloc.wach"

char *__test_string = "Hello, world!";

extern int ext2_find_file_inode(char *path);
extern void process_test_1();
extern void elf_dump_file(char *path);
extern char *ext2_read_file_full(char *path);

    void process_command(char *command) is
        if (strcmp(command, "ls") == 0) then
            uart_write_string("filesystem not yet available");
        else if (strcmp(command, "exit") == 0) then
            EMULATE_SYSCALL(1)
        else if (strncmp(command, "inode ", 6) == 0) then
            char *arg = command + 6;
            int ino = ext2_find_file_inode(arg);
            uart_write_int(ino);
        else if (strncmp(command, "elf ", 4) == 0) then
            char *arg = command + 4;
            elf_dump_file(arg);
        else if (strncmp(command, "cat ", 4) == 0) then
            char *arg = command + 4;
            char *ino = ext2_read_file_full(arg);
            if (ino == -ENOENT) then
                uart_write_string("File not found!");
            else if (ino == -EISDIR) then
                uart_write_string("Is a directory");
            else
                uart_write_string(ino);
            end end
        else if (strcmp(command, "swi") == 0) then
            EMULATE_SYSCALL(42)
        else if (strcmp(command, "irq") == 0) then
            bcm2835_timer_reset_interval(0x80000);
            mmio_write32(0x2000B210, 0x00000002);
            irq_enable();
            process_test_1();
        else if (strcmp(command, "sizeof") == 0) then
            uart_write_int(sizeof(struct file));
        else if (strcmp(command, "write") == 0) then
            begin inline
                push {r0-r2, r7}
                mov r0, #1
                ldr r1, =__test_string
                mov r2, #13
                mov r7, #4
                swi 0
                pop {r0-r2, r7}
            end
        else if (strcmp(command, "mem") == 0) then
            uint32 m = mm_mem_used();
            uart_write_string("Memory used: ");
            uart_write_int(m * 4096);
            uart_write_string(" bytes");
        else if (strcmp(command, "getmem") == 0) then
            void *ptr = kmalloc(64);
            uart_write_int_hex(ptr);
            uart_write_newline();
        else if (strlen(command) == 0) then
        else
            uart_write_string("command not found: ");
            uart_write_string(command);
        end end end end end end end end end end end end

        if (strlen(command) != 0) then
            uart_write_newline();
        end

    end

    void run_shell() is
        char *buffer = kmalloc(4096);

        while true do
            uart_write_string("waccOS % ");

            char *command = buffer;
            char input = '\0';

            while (input != '\r') do
                input = uart_get_char();

                if (input == '\r') then
                    *command = '\0';
                    uart_write_newline();
                else if (input == '\b') then
                    if command != buffer then
                        uart_write_char('\b');
                        uart_write_char(' ');
                        uart_write_char('\b');
                        command--;
                    end
                else
                    uart_write_char(input);
                    *command++ = input;
                end end
            end

            process_command(buffer);
        end
    end
end
